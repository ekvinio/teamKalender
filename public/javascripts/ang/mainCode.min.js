function parseRightsUser(paramlist){if("undefined"!=typeof paramlist){for(var i=0;i<paramlist.length;i++)-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("read_user")&&(0==paramlist[i].read_user?paramlist[i].read_user=!1:paramlist[i].read_user=!0),-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("create_user")&&(0==paramlist[i].create_user?paramlist[i].create_user=!1:paramlist[i].create_user=!0),-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("delete_user")&&(0==paramlist[i].delete_user?paramlist[i].delete_user=!1:paramlist[i].delete_user=!0,-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("create_grp")&&(0==paramlist[i].create_grp?paramlist[i].create_grp=!1:paramlist[i].create_grp=!0),-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("delete_grp")&&(0==paramlist[i].delete_grp?paramlist[i].delete_grp=!1:paramlist[i].delete_grp=!0)),-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("grant_rights")&&(0==paramlist[i].grant_rights?paramlist[i].grant_rights=!1:paramlist[i].grant_rights=!0);return paramlist}return null}function parseRightsGrp(paramlist){if("undefined"!=typeof paramlist){for(var i=0;i<paramlist.length;i++)-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("read_grp")&&(0==paramlist[i].read_grp?paramlist[i].read_grp=!1:paramlist[i].read_grp=!0),-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("invite_user")&&(0==paramlist[i].invite_user?paramlist[i].invite_user=!1:paramlist[i].invite_user=!0),-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("remove_user")&&(0==paramlist[i].remove_user?paramlist[i].remove_user=!1:paramlist[i].remove_user=!0),-1!=Object.getOwnPropertyNames(paramlist[i]).indexOf("grant_rights")&&(0==paramlist[i].grant_rights?paramlist[i].grant_rights=!1:paramlist[i].grant_rights=!0);return paramlist}return null}terminKalender.controller("logout",function($scope,$rootScope,$sessionStorage,$location){$scope.userLogged=!1,$scope.$on("isLogged",function(){$scope.userLogged=!0}),$scope.$on("isntLogged",function(){$scope.userLogged=!1}),$scope.logout=function(){$sessionStorage.$reset(),$location.path("/login"),$rootScope.$broadcast("isntLogged",null)}}),terminKalender.controller("userCtrl",function($scope,$rootScope,$location,$routeParams,$sessionStorage,userService){$scope.userTermine=!1,$scope.userMessages=!1,$scope.userLogged=$rootScope.userLogged,userService.getUser($routeParams.id).success(function(res){var data=res.data;$scope.successmessage=""+res.data.pers[0].User_Name,$scope.successvis=!0,1==res.acc?($scope.pers=data.pers||null,$scope.mess=data.mess||null,$scope.term=data.term||null,$scope.grpp=data.grpp||null,$scope.rech=data.rech||null,null!=data.list&&($scope.list=parseRightsUser(data.list)),$scope.acc=!0,$rootScope.$broadcast("isLogged",null)):($scope.pers=res.data.pers,$scope.term=res.data.term,$scope.acc=!1)}),$scope.switchUserTermine=function(){$scope.userTermine?$scope.userTermine=!1:$scope.userTermine=!0},$scope.switchUserMessages=function(){$scope.userMessages?$scope.userMessages=!1:$scope.userMessages=!0},$scope.switchUserCreate=function(){$scope.switchUser?$scope.switchUser=!1:$scope.switchUser=!0},$scope.switchGrpCreate=function(){$scope.switchGrp?$scope.switchGrp=!1:$scope.switchGrp=!0},$scope.updateUserRights=function(data){userService.updateUserRights(data).success(function(res){1==res.type?($scope.successvis=!0,$scope.successmessage="Rechte updaten funktioniert",userService.getUser($routeParams.id).success(function(res){null!=data.list&&($scope.list=parseRightsUser(res.data.list))})):($scope.errormessage="Rechte updaten nicht funktioniert",$scope.successvis=!1)})},$scope.sendMess=function(){if(alert($scope.newmess.empfaengerid),null!=$scope.newmess.empfaengerid&&($scope.newmess.absenderid=$scope.pers[0].User_Id,null!=$scope.list.length))for(var i=0;i<$scope.list.length;i++)-1!=$scope.list[i].User_Name.indexOf($scope.newmess.empfaengerid)&&($scope.newmess.empfaengerid=$scope.list[i].User_Id);null!=$scope.newmess.empfaengerid&&userService.sendMess($scope.newmess).success(function(res){1==res.type?($scope.userMessages=!1,$scope.successmessage="Nachricht senden hat Funtioniert!",$scope.successvis=!0):($scope.errormessage="Nachricht senden hat nicht Funtioniert!",$scope.successvis=!1)})},$scope.deleteMess=function(id){userService.deleteMess(id).success(function(res){1==res.type?userService.getUser($routeParams.id).success(function(res){$scope.mess=res.data.mess,$scope.successmessage="Nachricht löschen hat Funtioniert!",$scope.successvis=!0}):($scope.errormessage="Nachricht löschen hat nicht Funtioniert!",$scope.successvis=!1)})},$scope.createTermin=function(){var strstart,strende,truedate=!0,arrstart=[],arrende=[];null!=$scope.newterm.start&&null!=$scope.newterm.ende?(arrstart=$scope.newterm.start.split(" "),arrende=$scope.newterm.ende.split(" "),strstart=arrstart[0]+"T"+arrstart[1],strende=arrende[0]+"T"+arrende[1],(0==strstart.match("/^(d{4})-(d{2})-(d{2})T(d{2}):(d{2}):(d{2})$/")||0==strende.match("/^(d{4})-(d{2})-(d{2})T(d{2}):(d{2}):(d{2})$/"))&&($scope.errormessage="Termin falsches Format!",$scope.successvis=!1,truedate=!1),new Date>new Date(strstart)||new Date>new Date(strende)?($scope.errormessage="Termin liegt in der Vergangenheit!",$scope.successvis=!1,truedate=!1):new Date(strstart)>new Date(strende)&&($scope.errormessage="Termin Ende ist aelter als der Start!",$scope.successvis=!1,truedate=!1)):($scope.errormessage="Termin erstellen hat nicht Funtioniert!",$scope.successvis=!1,truedate=!1),truedate&&($scope.newterm.userid=$scope.pers[0].User_Id,userService.newTerm($scope.newterm).success(function(res){1==res.type?userService.getUser($routeParams.id).success(function(res){$scope.term=res.data.term,$scope.userTermine=!1,$scope.successmessage="Termin erstellen hat Funtioniert!",$scope.successvis=!0}):($scope.errormessage="Termin erstellen hat nicht Funtioniert!",$scope.successvis=!1)}))},$scope.deleteTermin=function(id){userService.deleteTerm(id).success(function(res){1==res.type?userService.getUser($routeParams.id).success(function(res){$scope.term=res.data.term,$scope.successmessage="Termin löschen hat Funtioniert!",$scope.successvis=!0}):($scope.errormessage="Termin löschen hat nicht Funtioniert!",$scope.successvis=!1)})},$scope.createUser=function(){null!=$scope.newuser?userService.newUser($scope.newuser).success(function(res){1==res.type?userService.getUser($routeParams.id).success(function(res){null!=res.data.list&&($scope.list=parseRightsUser(res.data.list),$scope.successmessage="User erstellen hat Funtioniert!",$scope.successvis=!0)}):($scope.errormessage="User erstellen hat nicht Funtioniert!",$scope.successvis=!1)}):($scope.errormessage="User erstellen hat nicht Funtioniert!",$scope.successvis=!1)},$scope.deleteUser=function(id){userService.deleteUser(id).success(function(res){1==res.type?userService.getUser($routeParams.id).success(function(res){null!=res.data.list&&($scope.list=parseRightsUser(res.data.list),$scope.successmessage="User löschen hat Funtioniert!",$scope.successvis=!0)}):($scope.errormessage="User löschen hat nicht Funtioniert!",$scope.successvis=!1)})},$scope.createGrp=function(){null!=$scope.newgrp?($scope.newgrp.ersteller=$routeParams.id,userService.newGrp($scope.newgrp).success(function(res){1==res.type?userService.getUser($routeParams.id).success(function(res){$scope.grpp=res.data.grpp,$scope.successmessage="Gruppen erstellen hat Funtioniert!",$scope.successvis=!0}):($scope.errormessage="Gruppen erstellen hat nicht Funtioniert!",$scope.successvis=!1)})):($scope.errormessage="Gruppen erstellen hat nicht Funtioniert!",$scope.successvis=!1)},$scope.deleteGrp=function(id){userService.deleteGrp(id).success(function(res){1==res.type?userService.getUser($routeParams.id).success(function(res){$scope.grpp=res.data.grpp,$scope.successmessage="Gruppen löschen hat Funtioniert!",$scope.successvis=!0}):($scope.errormessage="Gruppen löschen hat nicht Funtioniert!",$scope.successvis=!1)})}}),terminKalender.controller("groupCtrl",function($scope,$rootScope,$location,$routeParams,$sessionStorage,gruppenService){$scope.userLogged=$rootScope.userLogged,gruppenService.getGruppe($routeParams.id).success(function(res){$scope.pers=res.pers||null,$scope.memb=parseRightsGrp(res.memb)||null,$scope.term=res.term||null,$scope.rech=res.rech||null,$scope.successmessage=""+res.pers[0].Gruppen_Name,$scope.successvis=!0,$rootScope.$broadcast("isLogged",null)}),$scope.updateGroupRights=function(data){gruppenService.updateGroupRights(data).success(function(res){1==res.type?gruppenService.getGruppe($routeParams.id).success(function(res){$scope.memb=parseRightsGrp(res.memb),$scope.successmessage="Updaten der Gruppenrechte hat Funtioniert!",$scope.successvis=!0}):($scope.errormessage="Updaten der Gruppenrechte hat nicht Funtioniert!",$scope.successvis=!1)})},$scope.switchGruppenTermine=function(){$scope.gruppenTermine?$scope.gruppenTermine=!1:$scope.gruppenTermine=!0},$scope.createGruppenTermin=function(){var strstart,strende,truedate=!0,arrstart=[],arrende=[];null!=$scope.newterm.start&&null!=$scope.newterm.ende?(arrstart=$scope.newterm.start.split(" "),arrende=$scope.newterm.ende.split(" "),strstart=arrstart[0]+"T"+arrstart[1],strende=arrende[0]+"T"+arrende[1],(0==strstart.match("/^(d{4})-(d{2})-(d{2})T(d{2}):(d{2}):(d{2})$/")||0==strende.match("/^(d{4})-(d{2})-(d{2})T(d{2}):(d{2}):(d{2})$/"))&&($scope.errormessage="Termin falsches Format!",$scope.successvis=!1,truedate=!1),new Date>new Date(strstart)||new Date>new Date(strende)?($scope.errormessage="Termin liegt in der Vergangenheit!",$scope.successvis=!1,truedate=!1):new Date(strstart)>new Date(strende)&&($scope.errormessage="Termin Ende ist aelter als der Start!",$scope.successvis=!1,truedate=!1)):($scope.errormessage="Termin erstellen hat nicht Funtioniert!",$scope.successvis=!1,truedate=!1),truedate?($scope.newterm.grpid=$routeParams.id,gruppenService.newGrpTermin($scope.newterm).success(function(res){1==res.type?gruppenService.getGruppe($routeParams.id).success(function(res){$scope.term=res.term,$scope.gruppenTermine=!1,$scope.successmessage="Termin entfernen erstellen hat Funtioniert!;",$scope.successvis=!0}):($scope.errormessage="Termin erstellen hat nicht Funtioniert!",$scope.successvis=!1)})):($scope.errormessage="Termin erstellen hat nicht Funtioniert!",$scope.successvis=!1)},$scope.deleteGrpTermin=function(id){gruppenService.delGrpTermin(id).success(function(res){1==res.type?gruppenService.getGruppe($routeParams.id).success(function(res){$scope.term=res.term,$scope.successmessage="Termin entfernen erstellen hat Funtioniert!",$scope.successvis=!0}):($scope.errormessage="Termin entfernen hat nicht Funtioniert!",$scope.successvis=!1)})},$scope.inviteUser=function(){if(null!=$scope.invuser){var newgrpuser={grpid:$routeParams.id,name:$scope.invuser.name.toLowerCase()};gruppenService.inviteUser(newgrpuser).success(function(res){1==res.type?gruppenService.getGruppe($routeParams.id).success(function(res){$scope.memb=parseRightsGrp(res.memb),$scope.successmessage="User in die Gruppe einladen hat Funtioniert!",$scope.successvis=!0}):($scope.errormessage="User in die Gruppe einladen hat nicht Funtioniert!",$scope.successvis=!1)})}else $scope.errormessage="User in die Gruppe einladen hat nicht Funtioniert!",$scope.successvis=!1},$scope.removeUser=function(id){var deletegrp={grpid:$routeParams.id,userid:id};gruppenService.removeUser(deletegrp).success(function(res){1==res.type?gruppenService.getGruppe($routeParams.id).success(function(res){$scope.memb=parseRightsGrp(res.memb),$scope.successmessage="User von der Gruppen entfernen hat Funtioniert!",$scope.successvis=!0}):($scope.errormessage="User von der Gruppen entfernen hat nicht Funtioniert!",$scope.successvis=!1)})},$scope.switchUserCreate=function(){$scope.switchUser?$scope.switchUser=!1:$scope.switchUser=!0}}),terminKalender.controller("loginCtrl",function($scope,$rootScope,$location,$sessionStorage,loginService){$scope.tkLogin=function(){null!==$scope.login.name&&$scope.login.passw?loginService.postLogin($scope.login).success(function(res){1==res.type?($sessionStorage.token=res.token,$location.path("/user/"+res.data.id),$rootScope.userLogged=!0,$rootScope.$broadcast("isLogged",null)):($scope.errmessage=res.error,$scope.errorvis=!0,$location.path("/login"),$rootScope.userLogged=!1,$rootScope.$broadcast("isntLogged",null))}):$scope.errmessage="Daten Unvollstaendig!"}}),terminKalender.directive("kalender",function(){return{restrict:"E",templateUrl:"./parts/kalender.html",scope:{termine:"="},link:function(scope,elem,attr){scope.$watch("termine",function(newVal,oldVal){function match(days,newVal){var rows=generateRows(days),rowsterm=getTerms(days,newVal),days=[];if("undefined"!=typeof rowsterm&&rows.length===rowsterm.length){for(var i=0;i<rows.length;i++){for(var days2=[],j=0;j<rows[i].length;j++){var test={day:rows[i][j],term:rowsterm[i][j]||!1};days2.push(test)}days.push(days2)}return days}}function generateHeader(){for(var erg=[],c=0;6>=c;c++)erg.push("SMDMDFS"[c]);return erg}function generateRows(days){for(var rows=[],count=1,row1=[],i=0;6>=i;i++)i>=scope.firstDay?(row1.push(count),count++):row1.push(null);if(rows.push(row1),31==scope.days&&scope.firstDay>4)for(var i=0;4>=i;i++){for(var row=[],j=0;6>=j;j++){if(count>=days){row.push(count);break}row.push(count),count++}rows.push(row)}else for(var i=0;3>=i;i++){for(var row=[],j=0;6>=j;j++){if(count>=days){row.push(count);break}row.push(count),count++}rows.push(row)}return rows}function getTerms(days,terms){var days2=[],count=1,day=!1;if(null!=terms){for(var rowfirst=[],k2=0;6>=k2;k2++){for(var i2=0;i2<terms.length;i2++){var termstart=new Date(terms[i2].User_Termine_Start),termend=new Date(terms[i2].User_Termine_Ende),thisday=new Date(scope.date.getFullYear(),scope.date.getMonth(),count);if(termstart.getFullYear()==scope.date.getFullYear()&&termstart.getFullYear()==scope.date.getFullYear()){if(termstart.getMonth()<scope.date.getMonth()&&termend.getMonth()>scope.date.getMonth()&&scope.date.getMonth()!=termstart.getMonth()&&scope.date.getMonth()!=termend.getMonth()){day=!0;break}if(termstart.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}else if(termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termend.getDate()>=thisday.getDate()){day=!0;break}day=!1}else if(termstart.getMonth()==termend.getMonth()&&termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()==scope.date.getMonth()){if(termend.getDate()>=thisday.getDate()&&termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}}}k2>=scope.firstDay?(count++,rowfirst.push(day)):rowfirst.push(!1)}if(days2.push(rowfirst),31==scope.days&&scope.firstDay>4)for(var j=0;4>=j;j++){for(var days3=[],k=0;6>=k;k++){for(var i=0;i<terms.length;i++){var termstart=new Date(terms[i].User_Termine_Start),termend=new Date(terms[i].User_Termine_Ende),thisday=new Date(scope.date.getFullYear(),scope.date.getMonth(),count);if(termstart.getFullYear()==scope.date.getFullYear()&&termstart.getFullYear()==scope.date.getFullYear()){if(termstart.getMonth()<scope.date.getMonth()&&termend.getMonth()>scope.date.getMonth()&&scope.date.getMonth()!=termstart.getMonth()&&scope.date.getMonth()!=termend.getMonth()){day=!0;break}if(termstart.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}else if(termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termend.getDate()>=thisday.getDate()){day=!0;break}day=!1}else if(termstart.getMonth()==termend.getMonth()&&termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()==scope.date.getMonth()){if(termend.getDate()>=thisday.getDate()&&termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}}}if(count>=days){days3.push(day);break}count++,days3.push(day)}days2.push(days3)}else for(var j=0;3>=j;j++){for(var days3=[],k=0;6>=k;k++){for(var i=0;i<terms.length;i++){var termstart=new Date(terms[i].User_Termine_Start),termend=new Date(terms[i].User_Termine_Ende),thisday=new Date(scope.date.getFullYear(),scope.date.getMonth(),count);if(termstart.getFullYear()==scope.date.getFullYear()&&termstart.getFullYear()==scope.date.getFullYear()){if(termstart.getMonth()<scope.date.getMonth()&&termend.getMonth()>scope.date.getMonth()&&scope.date.getMonth()!=termstart.getMonth()&&scope.date.getMonth()!=termend.getMonth()){day=!0;break}if(termstart.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}else if(termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termend.getDate()>=thisday.getDate()){day=!0;break}day=!1}else if(termstart.getMonth()==termend.getMonth()&&termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()==scope.date.getMonth()){if(termend.getDate()>=thisday.getDate()&&termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}}}if(count>=days){days3.push(day);break}count++,days3.push(day)}days2.push(days3)}}return days2}var d=new Date,month_name=["January","February","March","April","May","June","July","August","September","October","November","December"],month=d.getMonth(),year=d.getFullYear(),first_date=month_name[month+1]+" 1 "+year,tmp=new Date(first_date).toDateString(),first_day=tmp.substring(0,3),day_name=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];day_name.indexOf(first_day);scope.firstDay=new Date(year,month,1).getDay(),scope.days=new Date(year,month+1,0).getDate(),scope.date=new Date(year,month,1),scope.calendar_month_year=month_name[month]+" "+year,scope.header=generateHeader(),scope.matchdays=match(scope.days,newVal),scope.next=function(){scope.date=new Date(scope.date.getFullYear(),scope.date.getMonth()+1,1),scope.firstDay=scope.date.getDay(),scope.days=new Date(scope.date.getFullYear(),scope.date.getMonth()+1,0).getDate(),scope.calendar_month_year=month_name[scope.date.getMonth()]+" "+scope.date.getFullYear(),scope.matchdays=match(scope.days,newVal)},scope.prev=function(){scope.date=new Date(scope.date.getFullYear(),scope.date.getMonth()-1,1),scope.firstDay=scope.date.getDay(),scope.days=new Date(scope.date.getFullYear(),scope.date.getMonth(),0).getDate(),scope.calendar_month_year=month_name[scope.date.getMonth()]+" "+scope.date.getFullYear(),scope.matchdays=match(scope.days,newVal)}})}}}),terminKalender.directive("kalendergrp",function(){return{restrict:"E",templateUrl:"./parts/kalender.html",scope:{termine:"="},link:function(scope,elem,attr){scope.$watch("termine",function(newVal,oldVal){function match(days,newVal){var rows=generateRows(days),rowsterm=getTerms(days,newVal),days=[];if("undefined"!=typeof rowsterm&&rows.length===rowsterm.length){for(var i=0;i<rows.length;i++){for(var days2=[],j=0;j<rows[i].length;j++){var test={day:rows[i][j],term:rowsterm[i][j]};days2.push(test)}days.push(days2)}return days}}function generateHeader(){for(var erg=[],c=0;6>=c;c++)erg.push("SMDMDFS"[c]);return erg}function generateRows(days){for(var rows=[],count=1,row1=[],i=0;6>=i;i++)i>=scope.firstDay?(row1.push(count),count++):row1.push(null);if(rows.push(row1),31==scope.days&&scope.firstDay>4)for(var i=0;4>=i;i++){for(var row=[],j=0;6>=j;j++){if(count>=days){row.push(count);break}row.push(count),count++}rows.push(row)}else for(var i=0;3>=i;i++){for(var row=[],j=0;6>=j;j++){if(count>=days){row.push(count);break}row.push(count),count++}rows.push(row)}return rows}function getTerms(days,terms){var days2=[],count=1,day=!1;if(null!=terms){for(var rowfirst=[],k2=0;6>=k2;k2++){for(var i2=0;i2<terms.length;i2++){var termstart=new Date(terms[i2].Gruppen_Termine_Start),termend=new Date(terms[i2].Gruppen_Termine_Ende),thisday=new Date(scope.date.getFullYear(),scope.date.getMonth(),count);if(termstart.getFullYear()==scope.date.getFullYear()&&termstart.getFullYear()==scope.date.getFullYear()){if(termstart.getMonth()<scope.date.getMonth()&&termend.getMonth()>scope.date.getMonth()&&scope.date.getMonth()!=termstart.getMonth()&&scope.date.getMonth()!=termend.getMonth()){day=!0;break}if(termstart.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}else if(termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termend.getDate()>=thisday.getDate()){day=!0;break}day=!1}else if(termstart.getMonth()==termend.getMonth()&&termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()==scope.date.getMonth()){if(termend.getDate()>=thisday.getDate()&&termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}}}k2>=scope.firstDay?(count++,rowfirst.push(day)):rowfirst.push(!1)}if(days2.push(rowfirst),31==scope.days&&scope.firstDay>4)for(var j=0;4>=j;j++){for(var days3=[],k=0;6>=k;k++){for(var i=0;i<terms.length;i++){var termstart=new Date(terms[i].Gruppen_Termine_Start),termend=new Date(terms[i].Gruppen_Termine_Ende),thisday=new Date(scope.date.getFullYear(),scope.date.getMonth(),count);if(termstart.getFullYear()==scope.date.getFullYear()&&termstart.getFullYear()==scope.date.getFullYear()){if(termstart.getMonth()<scope.date.getMonth()&&termend.getMonth()>scope.date.getMonth()&&scope.date.getMonth()!=termstart.getMonth()&&scope.date.getMonth()!=termend.getMonth()){day=!0;break}if(termstart.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}else if(termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termend.getDate()>=thisday.getDate()){day=!0;break}day=!1}else if(termstart.getMonth()==termend.getMonth()&&termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()==scope.date.getMonth()){if(termend.getDate()>=thisday.getDate()&&termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}}}if(count>=days){days3.push(day);break}count++,days3.push(day)}days2.push(days3)}else for(var j=0;3>=j;j++){for(var days3=[],k=0;6>=k;k++){for(var i=0;i<terms.length;i++){var termstart=new Date(terms[i].Gruppen_Termine_Start),termend=new Date(terms[i].Gruppen_Termine_Ende),thisday=new Date(scope.date.getFullYear(),scope.date.getMonth(),count);if(termstart.getFullYear()==scope.date.getFullYear()&&termstart.getFullYear()==scope.date.getFullYear()){if(termstart.getMonth()<scope.date.getMonth()&&termend.getMonth()>scope.date.getMonth()&&scope.date.getMonth()!=termstart.getMonth()&&scope.date.getMonth()!=termend.getMonth()){day=!0;break}if(termstart.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}else if(termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()!=termend.getMonth()){if(termend.getDate()>=thisday.getDate()){day=!0;break}day=!1}else if(termstart.getMonth()==termend.getMonth()&&termend.getMonth()==scope.date.getMonth()&&termstart.getMonth()==scope.date.getMonth()){if(termend.getDate()>=thisday.getDate()&&termstart.getDate()<=thisday.getDate()){day=!0;break}day=!1}}}if(count>=days){days3.push(day);break}count++,days3.push(day)}days2.push(days3)}}return days2}var d=new Date,month_name=["January","February","March","April","May","June","July","August","September","October","November","December"],month=d.getMonth(),year=d.getFullYear(),first_date=month_name[month+1]+" 1 "+year,tmp=new Date(first_date).toDateString(),first_day=tmp.substring(0,3),day_name=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];day_name.indexOf(first_day);scope.firstDay=new Date(year,month+1,0).getDay(),scope.days=new Date(year,month+1,0).getDate(),scope.date=new Date(year,month+1,0),scope.calendar_month_year=month_name[month]+" "+year,scope.header=generateHeader(),scope.matchdays=match(scope.days,newVal),scope.next=function(){scope.date=new Date(scope.date.getFullYear(),scope.date.getMonth()+1,1),scope.firstDay=scope.date.getDay(),scope.days=new Date(scope.date.getFullYear(),scope.date.getMonth()+1,0).getDate(),scope.calendar_month_year=month_name[scope.date.getMonth()]+" "+scope.date.getFullYear(),scope.matchdays=match(scope.days,newVal)},scope.prev=function(){scope.date=new Date(scope.date.getFullYear(),scope.date.getMonth()-1,1),scope.firstDay=scope.date.getDay(),scope.days=new Date(scope.date.getFullYear(),scope.date.getMonth(),0).getDate(),scope.calendar_month_year=month_name[scope.date.getMonth()]+" "+scope.date.getFullYear(),scope.matchdays=match(scope.days,newVal)}})}}}),terminKalender.config(function($routeProvider){$routeProvider.when("/login",{controller:"loginCtrl",templateUrl:"./parts/tkLogin.html"}),$routeProvider.when("/group/:id",{controller:"groupCtrl",templateUrl:"./parts/tkGroup.html"}),$routeProvider.when("/user/:id",{controller:"userCtrl",templateUrl:"./parts/tkUser.html"}),$routeProvider.otherwise("/login")}),terminKalender.factory("loginService",function($http){return{postLogin:function(data){return $http.post("/api/login",data)}}}),terminKalender.factory("userService",function($http){return{getUser:function(id){return $http.get("/api/spec/getUser/"+id)},newUser:function(data){return $http.post("/api/spec/newUser",data)},deleteUser:function(id){return $http["delete"]("/api/spec/delUser/"+id)},newGrp:function(data){return $http.post("/api/spec/newGrp",data)},deleteGrp:function(id){return $http["delete"]("/api/spec/delGrp/"+id)},newTerm:function(data){return $http.post("/api/spec/newTerm",data)},deleteTerm:function(id){return $http["delete"]("/api/spec/delTerm/"+id)},sendMess:function(data){return $http.post("/api/spec/sendMess",data)},deleteMess:function(id){return $http["delete"]("/api/spec/delMess/"+id)},updateUserRights:function(data){return $http.post("/api/spec/updateUserRights",data)}}}),terminKalender.factory("gruppenService",function($http){return{getGruppe:function(id){return $http.get("/api/spec/getGruppe/"+id)},newGrpTermin:function(data){return $http.post("/api/spec/createGrpTermin",data)},delGrpTermin:function(id){return $http["delete"]("/api/spec/delGrpTerm/"+id)},inviteUser:function(data){return $http.post("/api/spec/inviteUser",data)},removeUser:function(data){return $http.post("/api/spec/removeUser",data)},updateGroupRights:function(data){return $http.post("/api/spec/updateGroupRights",data)}}}),terminKalender.config(function($httpProvider){$httpProvider.interceptors.push(["$q","$location","$sessionStorage",function($q,$location,$sessionStorage){return{request:function(config){return config.headers=config.headers||{},$sessionStorage.token&&(config.headers.Authorization="Token "+$sessionStorage.token),config},responseError:function(response){return(401===response.status||403===response.status)&&($sessionStorage.$reset(),$location.path("/login")),$q.reject(response)}}}])});
//# sourceMappingURL=mainCode.min.js.map